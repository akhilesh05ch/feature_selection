import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
correlation_matrix = X.corr().abs()
upper_triangle = correlation_matrix.where(
    np.triu(np.ones(correlation_matrix.shape), k=1).astype(bool) # Changed pd.np to np
)
highly_correlated_features = [
    column for column in upper_triangle.columns if any(upper_triangle[column] > 0.85)
]
X_reduced = X.drop(columns=highly_correlated_features)

X_train_reduced, X_test_reduced, y_train, y_test = train_test_split(
    X_reduced, y, test_size=0.2, random_state=42
)

model_reduced = LinearRegression()
model_reduced.fit(X_train_reduced, y_train)
y_pred_reduced = model_reduced.predict(X_test_reduced)
rmse_reduced = mean_squared_error(y_test, y_pred_reduced, squared=False)
print(f"RMSE with reduced columns (correlation > 0.85 removed): {rmse_reduced}")
